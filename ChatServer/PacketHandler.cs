// This file is auto-generated by PacketGenerator.
using System;
using NetworkCore;

namespace Packet
{
    public static partial class PacketHandler
    {
        private static Dictionary<PacketType, Func<Session, byte[], Task>> s_handlers = new Dictionary<PacketType, Func<Session, byte[], Task>>();

        static PacketHandler()
        {
            RegisterHandlers();
        }

        private static void RegisterHandlers()
        {
            s_handlers.Add(PacketType.DisconnectReq, async (session, body) => { var packet = PacketSerializer.Deserialize_DisconnectReq(body); await OnDisconnectReq(session, packet); });
            s_handlers.Add(PacketType.CreateRoomReq, async (session, body) => { var packet = PacketSerializer.Deserialize_CreateRoomReq(body); await OnCreateRoomReq(session, packet); });
            s_handlers.Add(PacketType.RoomListReq, async (session, body) => { var packet = PacketSerializer.Deserialize_RoomListReq(body); await OnRoomListReq(session, packet); });
            s_handlers.Add(PacketType.RoomEnterReq, async (session, body) => { var packet = PacketSerializer.Deserialize_RoomEnterReq(body); await OnRoomEnterReq(session, packet); });
            s_handlers.Add(PacketType.ChatReq, async (session, body) => { var packet = PacketSerializer.Deserialize_ChatReq(body); await OnChatReq(session, packet); });
        }

        public static async Task HandlePacket(Session session, PacketType type, byte[] data)
        {
            if (false == s_handlers.ContainsKey(type))
            {
                Console.WriteLine($"No handle function is registered for this packet type. Type - {type}");
            }

            await s_handlers[type].Invoke(session, data);
        }
    }
}
