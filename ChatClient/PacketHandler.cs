// This file is auto-generated by PacketGenerator.
using System;
using NetworkCore;

namespace Packet
{
    public static partial class PacketHandler
    {
        private static Dictionary<PacketType, Func<Session, byte[], Task>> s_handlers = new Dictionary<PacketType, Func<Session, byte[], Task>>();

        static PacketHandler()
        {
            RegisterHandlers();
        }

        private static void RegisterHandlers()
        {
            s_handlers.Add(PacketType.DisconnectRes, async (session, body) => { var packet = PacketSerializer.Deserialize_DisconnectRes(body); await OnDisconnectRes(session, packet); });
            s_handlers.Add(PacketType.CreateRoomRes, async (session, body) => { var packet = PacketSerializer.Deserialize_CreateRoomRes(body); await OnCreateRoomRes(session, packet); });
            s_handlers.Add(PacketType.RoomListRes, async (session, body) => { var packet = PacketSerializer.Deserialize_RoomListRes(body); await OnRoomListRes(session, packet); });
            s_handlers.Add(PacketType.RoomEnterRes, async (session, body) => { var packet = PacketSerializer.Deserialize_RoomEnterRes(body); await OnRoomEnterRes(session, packet); });
            s_handlers.Add(PacketType.ChatRes, async (session, body) => { var packet = PacketSerializer.Deserialize_ChatRes(body); await OnChatRes(session, packet); });
            s_handlers.Add(PacketType.RoomInfoNoti, async (session, body) => { var packet = PacketSerializer.Deserialize_RoomInfoNoti(body); await OnRoomInfoNoti(session, packet); });
            s_handlers.Add(PacketType.ChatDataNoti, async (session, body) => { var packet = PacketSerializer.Deserialize_ChatDataNoti(body); await OnChatDataNoti(session, packet); });
        }

        public static async Task HandlePacket(Session session, PacketType type, byte[] data)
        {
            if (false == s_handlers.ContainsKey(type))
            {
                Console.WriteLine($"No handle function is registered for this packet type. Type - {type}");
            }

            await s_handlers[type].Invoke(session, data);
        }
    }
}
