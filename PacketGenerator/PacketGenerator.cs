using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace PacketGenerator
{
    internal class PacketGenerator
    {
        static void Main(string[] args)
        {
            if (args.Length < 2)
            {
                Console.WriteLine("- Usage: PacketGenerator <input.yaml> <output1.cs> <output2.cs> ...");
                return;
            }

            string inputFilePath = args[0];

            var serializer = new XmlSerializer(typeof(PacketFile));
            var reader = XmlReader.Create(inputFilePath);

            PacketFile? packetFile = serializer.Deserialize(reader) as PacketFile;

            Generate(packetFile!, args.Skip(1).ToArray());
        }

        public static void Generate(PacketFile packetFile, string[] outputFilePaths)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// This file is auto-generated by PacketGenerator.");
            sb.AppendLine("using System;");
            sb.AppendLine("using NetworkCore;");
            sb.AppendLine();

            // Namespace
            sb.AppendLine("namespace Packet");
            sb.AppendLine("{");

            // Enum
            sb.AppendLine("    public enum PacketType : short");
            sb.AppendLine("    {");
            foreach (var packet in packetFile.Packets)
            {
                sb.AppendLine($"        {packet.Name} = {packet.Id},");
            }
            sb.AppendLine("    }");
            sb.AppendLine();

            // Packet structs
            foreach (var packet in packetFile.Packets)
            {
                sb.AppendLine($"    public class {packet.Name}");
                sb.AppendLine("    {");
                foreach (var field in packet.Fields)
                {
                    sb.AppendLine($"        public {field.Type} {field.Name} {{ get; set; }}");
                }
                sb.AppendLine("    }");
                sb.AppendLine();
            }

            // Serialize / Deserialize methods
            sb.AppendLine("    public static class PacketSerializer");
            sb.AppendLine("    {");
            foreach (var packet in packetFile.Packets)
            {
                sb.AppendLine($"        public static byte[] Serialize({packet.Name} packet)");
                sb.AppendLine("        {");
                sb.AppendLine("            PacketWriter writer = new PacketWriter();");
                foreach (var field in packet.Fields)
                {
                    sb.AppendLine($"            writer.Write(packet.{field.Name});");
                }
                sb.AppendLine("            return writer.ToArray();");
                sb.AppendLine("        }");
                sb.AppendLine();

                sb.AppendLine($"        public static {packet.Name} Deserialize_{packet.Name}(byte[] data)");
                sb.AppendLine("        {");
                sb.AppendLine($"            {packet.Name} packet = new {packet.Name}();");
                sb.AppendLine("            PacketReader reader = new PacketReader(data);");
                foreach (var field in packet.Fields)
                {
                    sb.AppendLine($"            packet.{field.Name} = {MapReader(field.Type, field.Name)};");
                }
                sb.AppendLine("            return packet;");
                sb.AppendLine("        }");
            }
            sb.AppendLine("    }");

            // Close namespace
            sb.AppendLine("}");

            foreach (var outputFilePath in outputFilePaths)
            {
                File.WriteAllText(outputFilePath, sb.ToString());
            }
        }

        private static string MapReader(string type, string field)
        => type switch
        {
            "byte" => $"reader.ReadByte();",
            "short" => $"reader.ReadInt16();",
            "ushort" => $"reader.ReadUInt16();",
            "int" => $"reader.ReadInt32();",
            "uint" => $"reader.ReadUInt32();",
            "long" => $"reader.ReadInt64();",
            "ulong" => $"reader.ReadUInt64();",
            "float" => $"reader.ReadFloat();",
            "double" => $"reader.ReadDouble();",
            "bool" => $"reader.ReadBool();",
            "string" => $"reader.ReadString();",
            "byte[]" => $"reader.ReadBytes();",
            _ => throw new Exception($"Unknown type: {type}")
        };
    }
}
