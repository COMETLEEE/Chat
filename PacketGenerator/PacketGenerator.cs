using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Serialization;

namespace PacketGenerator
{
    internal class PacketGenerator
    {
        static private Dictionary<string, string> s_defaultInitialize = new Dictionary<string, string>
        {
            { "string", "string.Empty" }
            , { "byte[]", "Array.Empty<byte>()" }
            , { "List<string>", "new List<string>()" }
            , { "List<uint>", "new List<uint>()" }
        };

        static private string s_outputPacketFileName = "Packet.cs";

        static private string s_outputPacketHandlerFileName = "PacketHandler.cs";

        static private string s_inputFilePath = string.Empty;

        static private string s_outputDirectoryPath = string.Empty;

        static private string s_handlerFilter = string.Empty;

        static void Main(string[] args)
        {
            if (args.Length < 2)
            {
                Console.WriteLine("- Usage: PacketGenerator <Packet IDL File> <Output Directory> <Mode : None, Server, Client>");
                return;
            }

            s_inputFilePath = args[0];
            s_outputDirectoryPath = args[1];

            if (args.Length > 2)
            {
                string mode = args[2];

                if (string.Equals(mode, "Client", StringComparison.OrdinalIgnoreCase))
                {
                    s_handlerFilter = "Req";
                }
                else if (string.Equals(mode, "Server", StringComparison.OrdinalIgnoreCase))
                {
                    s_handlerFilter = "(Res|Noti)";
                }
            }
            

            var serializer = new XmlSerializer(typeof(PacketFile));
            var reader = XmlReader.Create(s_inputFilePath);

            PacketFile? packetFile = serializer.Deserialize(reader) as PacketFile;

            Generate(packetFile!);

            Console.WriteLine($"- 패킷 생성이 완료되었습니다.");
            Console.WriteLine($"- 생성된 총 패킷 개수 : {packetFile?.Packets.Count}");
        }

        private static void Generate(PacketFile packetFile)
        {
            string packetContents = GeneratePacket(packetFile);
            string packetHandlerContents = GeneratePacketHandler(packetFile);

            string outputPacketFilePath = Path.Combine(s_outputDirectoryPath, s_outputPacketFileName);
            string outputPacketHandlerFilePath = Path.Combine(s_outputDirectoryPath, s_outputPacketHandlerFileName);

            File.WriteAllText(outputPacketFilePath, packetContents);
            File.WriteAllText(outputPacketHandlerFilePath, packetHandlerContents);
        }

        private static string GeneratePacket(PacketFile packetFile)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// This file is auto-generated by PacketGenerator.");
            sb.AppendLine("using System;");
            sb.AppendLine("using NetworkCore;");
            sb.AppendLine();

            // Namespace
            sb.AppendLine("namespace Packet");
            sb.AppendLine("{");

            // Enum
            sb.AppendLine("    public enum PacketType : short");
            sb.AppendLine("    {");
            foreach (var packet in packetFile.Packets)
            {
                sb.AppendLine($"        {packet.Name} = {packet.Id},");
            }
            sb.AppendLine("    }");
            sb.AppendLine();

            // Packet structs
            foreach (var packet in packetFile.Packets)
            {
                sb.AppendLine($"    public class {packet.Name}");
                sb.AppendLine("    {");
                foreach (var field in packet.Fields)
                {
                    if (s_defaultInitialize.ContainsKey(field.Type) == true)
                    {
                        sb.AppendLine($"        public {field.Type} {field.Name} {{ get; set; }} = {s_defaultInitialize[field.Type]};");
                    }
                    else
                    {
                        sb.AppendLine($"        public {field.Type} {field.Name} {{ get; set; }}");
                    }
                }
                sb.AppendLine("    }");
                sb.AppendLine();
            }

            // Serialize / Deserialize methods
            sb.AppendLine("    public static class PacketSerializer");
            sb.AppendLine("    {");
            foreach (var packet in packetFile.Packets)
            {
                sb.AppendLine($"        public static byte[] Serialize({packet.Name} packet)");
                sb.AppendLine("        {");
                sb.AppendLine("            PacketWriter writer = new PacketWriter();");
                foreach (var field in packet.Fields)
                {
                    sb.AppendLine($"            writer.Write(packet.{field.Name});");
                }
                sb.AppendLine("            return writer.ToArray();");
                sb.AppendLine("        }");
                sb.AppendLine();

                sb.AppendLine($"        public static {packet.Name} Deserialize_{packet.Name}(byte[] data)");
                sb.AppendLine("        {");
                sb.AppendLine($"            {packet.Name} packet = new {packet.Name}();");
                sb.AppendLine("            PacketReader reader = new PacketReader(data);");
                foreach (var field in packet.Fields)
                {
                    sb.AppendLine($"            packet.{field.Name} = {MapReader(field.Type, field.Name)};");
                }
                sb.AppendLine("            return packet;");
                sb.AppendLine("        }");
            }
            sb.AppendLine("    }");

            // Close namespace
            sb.AppendLine("}");

            return sb.ToString();
        }

        private static string GeneratePacketHandler(PacketFile packetFile)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// This file is auto-generated by PacketGenerator.");
            sb.AppendLine("using System;");
            sb.AppendLine("using NetworkCore;");
            sb.AppendLine();

            // Namespace
            sb.AppendLine("namespace Packet");
            sb.AppendLine("{");

            // class PacketHandler
            sb.AppendLine("    public static partial class PacketHandler");
            sb.AppendLine("    {");
            sb.AppendLine("        private static Dictionary<PacketType, Func<Session, byte[], Task>> s_handlers = new Dictionary<PacketType, Func<Session, byte[], Task>>();");
            sb.AppendLine();

            sb.AppendLine("        static PacketHandler()");
            sb.AppendLine("        {");
            sb.AppendLine("            RegisterHandlers();");
            sb.AppendLine("        }");
            sb.AppendLine();

            sb.AppendLine("        private static void RegisterHandlers()");
            sb.AppendLine("        {");
            foreach (var packet in packetFile.Packets)
            {
                if (Regex.IsMatch(packet.Name, s_handlerFilter))
                {
                    Console.WriteLine($"Packet handler function add filtered. Type - {packet.Name}");
                    continue;
                }

                sb.AppendLine($"            s_handlers.Add(PacketType.{packet.Name}, async (session, body) => {{ var packet = PacketSerializer.Deserialize_{packet.Name}(body); await On{packet.Name}(session, packet); }});");
            }
            sb.AppendLine("        }");
            sb.AppendLine();

            sb.AppendLine("        public static async Task HandlePacket(Session session, PacketType type, byte[] data)");
            sb.AppendLine("        {");
            sb.AppendLine("            if (false == s_handlers.ContainsKey(type))");
            sb.AppendLine("            {");
            sb.AppendLine("                Console.WriteLine($\"No handle function is registered for this packet type. Type - {type}\");");
            sb.AppendLine("            }");
            sb.AppendLine();
            sb.AppendLine("            await s_handlers[type].Invoke(session, data);");
            sb.AppendLine("        }");

            //foreach (var packet in packetFile.Packets)
            //{
            //    if (Regex.IsMatch(packet.Name, s_handlerFilter))
            //    {
            //        Console.WriteLine($"Packet handler function declaration filtered. Type - {packet.Name}");
            //        continue;
            //    }

            //    sb.AppendLine();
            //    sb.AppendLine($"        static partial void On{packet.Name}(Session session, {packet.Name} packet);");
            //}

            // Close class
            sb.AppendLine("    }");

            // Close namespace
            sb.AppendLine("}");

            return sb.ToString();
        }

        private static string MapReader(string type, string field)
        => type switch
        {
            "byte" => "reader.ReadByte();",
            "short" => "reader.ReadInt16();",
            "ushort" => "reader.ReadUInt16();",
            "int" => "reader.ReadInt32();",
            "uint" => "reader.ReadUInt32();",
            "long" => "reader.ReadInt64();",
            "ulong" => "reader.ReadUInt64();",
            "float" => "reader.ReadFloat();",
            "double" => "reader.ReadDouble();",
            "bool" => "reader.ReadBool();",
            "string" => "reader.ReadString();",
            "byte[]" => "reader.ReadBytes();",
            "List<string>" => "reader.ReadStrings();",
            "List<uint>" => "reader.ReadUInt32s();",
            _ => throw new Exception($"Unknown type: {type}")
        };
    }
}
